table(hflights$Season)
boxplot(formula = DepDelay ~ Season,
data = hflights,
main = 'Departure delay by season',
xlab = 'Season',
ylab = 'Departure delay [min]',
border = c('springgreen', 'yellow', 'orange', 'skyblue'))
#names = c('Spring', 'Summer', 'Fall', 'Winter'))
aggregated.mean.sd.median <- cbind(
mean = aggregate(formula = DepDelay ~ Season,
data = hflights,
FUN = mean,
na.rm = T),
sd = aggregate(formula = DepDelay ~ Season,
data = hflights,
FUN = sd,
na.rm = T),
median= aggregate(formula = DepDelay ~ Season,
data = hflights,
FUN = median,
na.rm = T)
)
aggregated.mean.sd.median
hflights.pcs <- prcomp(hflights[,c(1:7,10,11)], center = TRUE, scale = FALSE)
summary(hflights.pcs)
str(hflights.pcs)
corrmat = hflights.corr()
hflights.pcs <- prcomp(hflights[,c(1:7,10,11)], center = TRUE, scale = FALSE)
summary(hflights.pcs)
str(hflights.pcs)
plot(hflights.pcs)
#hflights.pcs <- prcomp(hflights[,c(1:7,10,11)], center = TRUE, scale = FALSE)
hflights.pcs <- princomp(data)
hflights.pcs <- prcomp(hflights[,c(1:7,10,11)], center = TRUE, scale = FALSE)
#hflights.pcs <- princomp(data)
summary(hflights.pcs)
loadings(hflights.pcs)
help(help)
help("help")
?help
installed.packages()
install.packages("shiny")
runexample("01_hello")
runExample("01_hello")
runExample("01_hello")
runExample("01_hello")
runExample("01_hello")
libraries <- c("FactoMineR","factoextra")
lapply(libraries, require, character.only = TRUE)
library(ggplot2)
library(GGally)
library(ggcorrplot)
require("hflights")
library("hflights")
nrow(hflights)
ncol(hflights)
names(hflights)
str(hflights)
#arrData <- data[1:100000,]
#str(arrData)
hflights
library("hflights")
nrow(hflights)
ncol(hflights)
names(hflights)
#require("hflights")
install.packages("hflights")
install.packages("hflights")
library("hflights")
nrow(hflights)
ncol(hflights)
names(hflights)
str(hflights)
libraries <- c("FactoMineR","factoextra")
lapply(libraries, require, character.only = TRUE)
library(ggplot2)
library(GGally)
library(ggcorrplot)
library(ggplot2)
library(GGally)
library(ggcorrplot)
df <- read_csv('/data/plane-data.csv')
df <- read.csv('/data/plane-data.csv')
df <- read.csv('plane-data.csv')
str(df)
df <- read.csv('2008.csv')
str(df)
nrow(hflights)
ncol(hflights)
names(hflights)
nrow(df)
ncol(df)
names(df)
str(df)
forbiddenVariables <- c("ArrTime","ActualElapsedTime","AirTime","TaxiIn","Diverted","CarrierDelay","WeatherDelay","NASDelay","SecurityDelay","LateAircraftDelay")
df <- df[, !(colnames(hflights) %in% forbiddenVariables)]
notQuantitativeVariables <- c("UniqueCarrier","TailNum","Origin","Dest","CancellationCode")
df <- df[, !(colnames(df) %in% notQuantitativeVariables)]
df=na.omit(df)
attach(df)
str(df)
df$OnTimeArrival = ifelse(df$ArrDelay > 0,"Delayed", "OnTime")
ggplot(df, aes(factor(OnTimeArrival))) + geom_bar() + coord_flip()
df$OnTimeArrival = ifelse(df$ArrDelay > 0,"Delayed", "OnTime")
ggplot(df, aes(x=DayOfWeek, fill=factor(OnTimeArrival))) + geom_histogram(position="dodge") +
scale_fill_manual(values=c("#9F2042","#AEA200"))
df$OnTimeArrival = ifelse(df$ArrDelay > 0,"Delayed", "OnTime")
ggplot(df, aes(x=DepDelay, y=ArrDelay)) + geom_point() + geom_smooth(method=lm)
ggplot(df, aes(x=DepDelay, fill=factor(OnTimeArrival))) + geom_histogram(position="dodge") + scale_fill_manual(values=c("#9F2042","#AEA200"))
cor(df$DepDelay, df$ArrDelay)
df$OnTimeArrival = ifelse(df$ArrDelay > 0,"Delayed", "OnTime")
ggplot(df, aes(x=Origin, fill=factor(OnTimeArrival))) + geom_histogram(position="dodge") +
scale_fill_manual(values=c("#9F2042","#AEA200"))
str(df)
str(df)
df <- read.csv('2008.csv')
str(df)
nrow(df)
ncol(df)
names(df)
df$OnTimeArrival = ifelse(df$ArrDelay > 0,"Delayed", "OnTime")
ggplot(df, aes(factor(OnTimeArrival))) + geom_bar() + coord_flip()
df$OnTimeArrival = ifelse(df$ArrDelay > 0,"Delayed", "OnTime")
ggplot(df, aes(x=DayOfWeek, fill=factor(OnTimeArrival))) + geom_histogram(position="dodge") +
scale_fill_manual(values=c("#9F2042","#AEA200"))
df$OnTimeArrival = ifelse(df$ArrDelay > 0,"Delayed", "OnTime")
ggplot(df, aes(x=DepDelay, y=ArrDelay)) + geom_point() + geom_smooth(method=lm)
ggplot(df, aes(x=DepDelay, fill=factor(OnTimeArrival))) + geom_histogram(position="dodge") + scale_fill_manual(values=c("#9F2042","#AEA200"))
cor(df$DepDelay, df$ArrDelay)
df$OnTimeArrival = ifelse(df$ArrDelay > 0,"Delayed", "OnTime")
ggplot(df, aes(x=Origin, fill=factor(OnTimeArrival))) + geom_histogram(position="dodge") +
scale_fill_manual(values=c("#9F2042","#AEA200"))
round(prop.table(table(airline,ArrStatus))*100,2)
df %>% group_by(ArrStatus) %>% summarize(num_cases = n(),average_air_time = mean(AirTime), average_flight_distance = mean(Distance))
df$OnTimeArrival = ifelse(df$ArrDelay > 0,"Delayed", "OnTime")
ggplot(df, aes(x=Origin, y=ArrDelay)) + geom_point() + geom_smooth(method=lm)
ggplot(df, aes(x=Origin, fill=factor(OnTimeArrival))) + geom_histogram(position="dodge") + scale_fill_manual(values=c("#9F2042","#AEA200"))
df$OnTimeArrival = ifelse(df$ArrDelay > 0,"Delayed", "OnTime")
ggplot(df, aes(x=Origin, y=ArrDelay)) + geom_point() + geom_smooth(method=lm)
ggplot(df, aes(x=Origin, fill=factor(OnTimeArrival))) + geom_histogram(stat="count", position="dodge") + scale_fill_manual(values=c("#9F2042","#AEA200"))
cor(df$Origin, df$ArrDelay)
ggplot(data=df) +
geom_boxplot(mapping = aes(x=ArrStatus, y=Distance,fill = ArrStatus)) +
xlab("Flight Arrival Status") +
ylab("Flight Distance") +
scale_fill_manual(values=c("#9F2042","#AEA200"))
df$ArrStatus = ifelse(df$ArrDelay > 0,"Delayed", "OnTime")
ggplot(data=df) +
geom_boxplot(mapping = aes(x=ArrStatus, y=Distance,fill = ArrStatus)) +
xlab("Flight Arrival Status") +
ylab("Flight Distance") +
scale_fill_manual(values=c("#9F2042","#AEA200"))
df$ArrStatus = ifelse(df$ArrDelay > 14,"Delayed", "OnTime")
ggplot(data=df) +
geom_boxplot(mapping = aes(x=ArrStatus, y=Distance,fill = ArrStatus)) +
xlab("Flight Arrival Status") +
ylab("Flight Distance") +
scale_fill_manual(values=c("#9F2042","#AEA200"))
df$OnTimeArrival = ifelse(df$ArrDelay > 14,"Delayed", "OnTime")
ggplot(df, aes(x=Origin, y=ArrDelay)) + geom_point() + geom_smooth(method=lm)
ggplot(df, aes(x=Origin, fill=factor(OnTimeArrival))) + geom_histogram(stat="count", position="dodge") + scale_fill_manual(values=c("#9F2042","#AEA200"))
cor(df$Origin, df$ArrDelay)
#df %>% ggplot(aes(x=ArrStatus,fill=airline)) + geom_histogram(stat="count", position = 'dodge')
df$ArrStatus = ifelse(df$ArrDelay > 14,"Delayed", "OnTime")
ggplot(df, aes(x=ArrStatus, fill=Origin)) + geom_histogram(stat="count", position="dodge") + scale_fill_manual(values=c("#9F2042","#AEA200"))
#df %>% ggplot(aes(x=ArrStatus,fill=airline)) + geom_histogram(stat="count", position = 'dodge')
df$ArrStatus = ifelse(df$ArrDelay > 0,"Delayed", "OnTime")
ggplot(df, aes(x=ArrStatus, fill=factor(Origin))) + geom_histogram(position="dodge") + scale_fill_manual(values=c("#9F2042","#AEA200"))
#df %>% ggplot(aes(x=ArrStatus,fill=airline)) + geom_histogram(stat="count", position = 'dodge')
df$ArrStatus = ifelse(df$ArrDelay > 0,"Delayed", "OnTime")
ggplot(df, aes(x=ArrStatus, fill=factor(Origin))) + geom_histogram(stat="count", position="dodge") + scale_fill_manual(values=c("#9F2042","#AEA200"))
libraries <- c("FactoMineR","factoextra")
lapply(libraries, require, character.only = TRUE)
library(ggplot2)
library(GGally)
library(ggcorrplot)
df <- read.csv('2008.csv')
str(df)
nrow(df)
ncol(df)
names(df)
df$OnTimeArrival = ifelse(df$ArrDelay > 0,"Delayed", "OnTime")
ggplot(df, aes(factor(OnTimeArrival))) + geom_bar() + coord_flip()
df$OnTimeArrival = ifelse(df$ArrDelay > 0,"Delayed", "OnTime")
ggplot(df, aes(x=DayOfWeek, fill=factor(OnTimeArrival))) + geom_histogram(position="dodge") +
scale_fill_manual(values=c("#9F2042","#AEA200"))
df$OnTimeArrival = ifelse(df$ArrDelay > 0,"Delayed", "OnTime")
ggplot(df, aes(x=DepDelay, y=ArrDelay)) + geom_point() + geom_smooth(method=lm)
ggplot(df, aes(x=DepDelay, fill=factor(OnTimeArrival))) + geom_histogram(position="dodge") + scale_fill_manual(values=c("#9F2042","#AEA200"))
cor(df$DepDelay, df$ArrDelay)
#df %>% ggplot(aes(x=ArrStatus,fill=airline)) + geom_histogram(stat="count", position = 'dodge')
df$ArrStatus = ifelse(df$ArrDelay > 0,"Delayed", "OnTime")
ggplot(df, aes(x=ArrStatus, fill=factor(Origin))) + geom_histogram(stat="count", position="dodge") + scale_fill_manual(values=c("#9F2042","#AEA200"))
#df %>% ggplot(aes(x=ArrStatus,fill=airline)) + geom_histogram(stat="count", position = 'dodge')
df$ArrStatus = ifelse(df$ArrDelay > 0,"Delayed", "OnTime")
ggplot(df, aes(x=ArrStatus, fill=factor(Origin))) + geom_histogram(stat="count", position="dodge")
cor(df$Origin, df$ArrDelay)
#df %>% ggplot(aes(x=ArrStatus,fill=airline)) + geom_histogram(stat="count", position = 'dodge')
df$ArrStatus = ifelse(df$ArrDelay > 0,"Delayed", "OnTime")
ggplot(df, aes(x=ArrStatus, fill=Origin)) + geom_histogram(stat="count", position="dodge")
#df %>% ggplot(aes(x=ArrStatus,fill=airline)) + geom_histogram(stat="count", position = 'dodge')
df$ArrStatus = ifelse(df$ArrDelay > 0,"Delayed", "OnTime")
df %>% ggplot(aes(x=ArrStatus,fill=airline)) + geom_histogram(stat="count", position = 'dodge')
#df %>% ggplot(aes(x=ArrStatus,fill=airline)) + geom_histogram(stat="count", position = 'dodge')
df$ArrStatus = ifelse(df$ArrDelay > 0,"Delayed", "OnTime")
#df %>% ggplot(aes(x=ArrStatus,fill=airline)) + geom_histogram(stat="count", position = 'dodge')
ggplot(df, aes(x=ArrStatus, fill=Origin)) + geom_histogram(stat="count", position="dodge")
#library(ggplot2)
#library(GGally)
#library(ggcorrplot)
library('magrittr')
df %>% ggplot(aes(x=ArrStatus,fill=airline)) + geom_histogram(stat="count", position = 'dodge')
df$ArrStatus = ifelse(df$ArrDelay > 0,"Delayed", "OnTime")
df %>% ggplot(aes(x=ArrStatus,fill=Origin)) + geom_histogram(stat="count", position = 'dodge')
#df$ArrStatus = ifelse(df$ArrDelay > 0,"Delayed", "OnTime")
#df %>% ggplot(aes(x=ArrStatus,fill=airline)) + geom_histogram(stat="count", position = 'dodge')
#ggplot(df, aes(x=ArrStatus, fill=Origin)) + geom_histogram(stat="count", position="dodge")
df$ArrStatus = ifelse(df$ArrDelay > 14,"Delayed", "OnTime")
df %>% ggplot(aes(x=ArrStatus,fill=Origin)) + geom_histogram(stat="count", position = 'dodge')
#df$ArrStatus = ifelse(df$ArrDelay > 0,"Delayed", "OnTime")
#df %>% ggplot(aes(x=ArrStatus,fill=airline)) + geom_histogram(stat="count", position = 'dodge')
#ggplot(df, aes(x=ArrStatus, fill=Origin)) + geom_histogram(stat="count", position="dodge")
df$ArrStatus = ifelse(df$ArrDelay > 14,"Delayed", "OnTime")
df$route <- paste(Origin, Dest, sep="-")
df$ArrStatus = ifelse(df$ArrDelay > 14,"Delayed", "OnTime")
str(df)
df$ArrStatus = ifelse(df$ArrDelay > 14,"Delayed", "OnTime")
attach(df)
str(df)
df$route <- paste(Origin, Dest, sep="-")
routes_delay <- df %>% group_by(route, ArrStatus) %>% summarise(count=n())
#library(ggplot2)
#library(GGally)
#library(ggcorrplot)
library('magrittr')
library('tidyverse')
install.packages("tidyverse")
df$route <- paste(Origin, Dest, sep="-")
routes_delay <- df %>% group_by(route, ArrStatus) %>% summarise(count=n())
#library(ggplot2)
#library(GGally)
#library(ggcorrplot)
library('magrittr')
library('tidyverse')
df$route <- paste(Origin, Dest, sep="-")
routes_delay <- df %>% group_by(route, ArrStatus) %>% summarise(count=n())
print(routes_delay)
routes_delay <- routes_delay %>% spread(key=ArrStatus, value=count)
print(routes_delay)
routes_delay <- routes_delay %>% spread(key=ArrStatus, value=count)
routes_delay <- routes_delay %>% mutate(per_delay=DelayedonArrival*100/(DelayedonArrival+OntimeArr), per_ontime=100-per_delay)
df$route <- paste(Origin, Dest, sep="-")
routes_delay <- df %>% group_by(route, ArrStatus) %>% summarise(count=n())
print(routes_delay)
routes_delay <- routes_delay %>% spread(key=ArrStatus, value=count)
print(routes_delay)
routes_delay <- routes_delay %>% mutate(per_delay=DelayedonArrival*100/(DelayedonArrival+OntimeArr), per_ontime=100-per_delay)
routes_delay <- routes_delay %>% mutate(per_delay=DelayedonArrival*100/(Delayed+OnTime), per_ontime=100-per_delay)
routes_delay <- routes_delay %>% mutate(per_delay=Delayed*100/(Delayed+OnTime), per_ontime=100-per_delay)
## Routes where flights are delayed more than 85% of the time
routes_delay %>% filter(per_delay>85)
routes_delay %>%  filter(per_delay>=85) %>% ggplot(aes(x=route, y=per_delay, fill=route)) + geom_bar(stat="identity") + theme_minimal() + theme(axis.text.x = element_text(angle=45)) + ylab("percentage delay")
df$route <- paste(Origin, Dest, sep="-")
routes_delay <- df %>% group_by(route, ArrStatus) %>% summarise(count=n())
print(routes_delay)
routes_delay <- routes_delay %>% spread(key=ArrStatus, value=count)
print(routes_delay)
routes_delay <- routes_delay %>% mutate(per_delay=Delayed*100/(Delayed+OnTime), per_ontime=100-per_delay)
## Routes where flights are delayed more than 85% of the time
routes_delay %>% filter(per_delay>50)
routes_delay %>%  filter(per_delay>=50) %>% ggplot(aes(x=route, y=per_delay, fill=route)) + geom_bar(stat="identity") + theme_minimal() + theme(axis.text.x = element_text(angle=45)) + ylab("percentage delay")
routes_delay <- routes_delay %>% mutate(per_delay=Delayed*100/(Delayed+OnTime), per_ontime=100-per_delay)
## Routes where flights are delayed more than 85% of the time
routes_delay %>% filter(per_delay>60)
routes_delay %>%  filter(per_delay>=60) %>% ggplot(aes(x=route, y=per_delay, fill=route)) + geom_bar(stat="identity") + theme_minimal() + theme(axis.text.x = element_text(angle=45)) + ylab("percentage delay")
routes_delay <- routes_delay %>% mutate(per_delay=Delayed*100/(Delayed+OnTime), per_ontime=100-per_delay)
## Routes where flights are delayed more than 85% of the time
routes_delay %>% filter(per_delay>70)
routes_delay %>%  filter(per_delay>=70) %>% ggplot(aes(x=route, y=per_delay, fill=route)) + geom_bar(stat="identity") + theme_minimal() + theme(axis.text.x = element_text(angle=45)) + ylab("percentage delay")
routes_delay %>% filter(per_ontime>=95) %>% ggplot(aes(x=route, y=per_ontime, fill=route)) + geom_bar(stat="identity") + theme_minimal() + theme(axis.text.x = element_text(angle=45)) + ylab("percentage on-time")
routes_delay %>% filter(per_ontime>=98) %>% ggplot(aes(x=route, y=per_ontime, fill=route)) + geom_bar(stat="identity") + theme_minimal() + theme(axis.text.x = element_text(angle=45)) + ylab("percentage on-time")
routes_delay %>% filter(per_ontime>=95) %>% ggplot(aes(x=route, y=per_ontime, fill=route)) + geom_bar(stat="identity") + theme_minimal() + theme(axis.text.x = element_text(angle=45)) + ylab("percentage on-time")
routes_delay %>% filter(per_ontime>=97) %>% ggplot(aes(x=route, y=per_ontime, fill=route)) + geom_bar(stat="identity") + theme_minimal() + theme(axis.text.x = element_text(angle=45)) + ylab("percentage on-time")
routes_delay %>% filter(per_ontime>=99) %>% ggplot(aes(x=route, y=per_ontime, fill=route)) + geom_bar(stat="identity") + theme_minimal() + theme(axis.text.x = element_text(angle=45)) + ylab("percentage on-time")
routes_delay %>% filter(per_ontime>=98) %>% ggplot(aes(x=route, y=per_ontime, fill=route)) + geom_bar(stat="identity") + theme_minimal() + theme(axis.text.x = element_text(angle=45)) + ylab("percentage on-time")
routes_delay %>% filter(per_ontime>=90) %>% ggplot(aes(x=route, y=per_ontime, fill=route)) + geom_bar(stat="identity") + theme_minimal() + theme(axis.text.x = element_text(angle=45)) + ylab("percentage on-time")
routes_delay %>% filter(per_ontime>=98) %>% ggplot(aes(x=route, y=per_ontime, fill=route)) + geom_bar(stat="identity") + theme_minimal() + theme(axis.text.x = element_text(angle=45)) + ylab("percentage on-time")
origin_delay <- df %>% group_by(Origin, ArrStatus) %>% summarise(count=n())
print(origin_delay)
origin_delay <- origin_delay %>% spread(key=ArrStatus, value=count)
print(origin_delay)
origin_delay <- origin_delay %>% mutate(per_delay=Delayed*100/(Delayed+OnTime), per_ontime=100-per_delay)
## Routes where flights are delayed more than 85% of the time
origin_delay %>% filter(per_delay>70)
origin_delay <- origin_delay %>% mutate(per_delay=Delayed*100/(Delayed+OnTime), per_ontime=100-per_delay)
## Routes where flights are delayed more than 85% of the time
origin_delay %>% filter(per_delay>50)
origin_delay <- origin_delay %>% mutate(per_delay=Delayed*100/(Delayed+OnTime), per_ontime=100-per_delay)
## Routes where flights are delayed more than 85% of the time
origin_delay %>% filter(per_delay>40)
origin_delay <- origin_delay %>% mutate(per_delay=Delayed*100/(Delayed+OnTime), per_ontime=100-per_delay)
## Routes where flights are delayed more than 85% of the time
origin_delay %>% filter(per_delay>30)
origin_delay <- origin_delay %>% mutate(per_delay=Delayed*100/(Delayed+OnTime), per_ontime=100-per_delay)
## Routes where flights are delayed more than 85% of the time
origin_delay %>% filter(per_delay>35)
dest_delay <- df %>% group_by(Dest, ArrStatus) %>% summarise(count=n())
print(dest_delay)
dest_delay <- dest_delay %>% spread(key=ArrStatus, value=count)
print(dest_delay)
origin_delay %>%  filter(per_delay>=70) %>% ggplot(aes(x=Origin, y=per_delay, fill=route)) + geom_bar(stat="identity") + theme_minimal() + theme(axis.text.x = element_text(angle=45)) + ylab("percentage delay")
origin_delay %>%  filter(per_delay>=70) %>% ggplot(aes(x=Origin, y=per_delay, fill=Origin)) + geom_bar(stat="identity") + theme_minimal() + theme(axis.text.x = element_text(angle=45)) + ylab("percentage delay")
origin_delay <- origin_delay %>% mutate(per_delay=Delayed*100/(Delayed+OnTime), per_ontime=100-per_delay)
## Routes where flights are delayed more than 85% of the time
origin_delay %>% filter(per_delay>35)
origin_delay %>%  filter(per_delay>=35) %>% ggplot(aes(x=Origin, y=per_delay, fill=Origin)) + geom_bar(stat="identity") + theme_minimal() + theme(axis.text.x = element_text(angle=45)) + ylab("percentage delay")
origin_delay %>%  filter(per_delay>=50) %>% ggplot(aes(x=Origin, y=per_delay, fill=Origin)) + geom_bar(stat="identity") + theme_minimal() + theme(axis.text.x = element_text(angle=45)) + ylab("percentage delay")
origin_delay %>%  filter(per_delay>=35) %>% ggplot(aes(x=Origin, y=per_delay, fill=Origin)) + geom_bar(stat="identity") + theme_minimal() + theme(axis.text.x = element_text(angle=45)) + ylab("percentage delay")
dest_delay <- df %>% group_by(Dest, ArrStatus) %>% summarise(count=n())
print(dest_delay)
dest_delay <- dest_delay %>% spread(key=ArrStatus, value=count)
print(dest_delay)
dest_delay <- dest_delay %>% mutate(per_delay=Delayed*100/(Delayed+OnTime), per_ontime=100-per_delay)
## Routes where flights are delayed more than 85% of the time
dest_delay %>% filter(per_delay>35)
dest_delay %>%  filter(per_delay>=35) %>% ggplot(aes(x=Dest, y=per_delay, fill=Dest)) + geom_bar(stat="identity") + theme_minimal() + theme(axis.text.x = element_text(angle=45)) + ylab("percentage delay")
forbiddenVariables <- c("ArrTime","ActualElapsedTime","AirTime","TaxiIn","Diverted","CarrierDelay","WeatherDelay","NASDelay","SecurityDelay","LateAircraftDelay")
df <- df[, !(colnames(hflights) %in% forbiddenVariables)]
#notQuantitativeVariables <- c("UniqueCarrier","TailNum","Origin","Dest","CancellationCode")
#df <- df[, !(colnames(df) %in% notQuantitativeVariables)]
df=na.omit(df)
attach(df)
str(df)
df$OnTimeArrival = ifelse(df$ArrDelay > 14,"Delayed", "OnTime")
ggplot(df, aes(factor(OnTimeArrival))) + geom_bar() + coord_flip()
df$ArrStatus = ifelse(df$ArrDelay > 14,"Delayed", "OnTime")
ggplot(df, aes(factor(ArrStatus))) + geom_bar() + coord_flip()
#df$OnTimeArrival = ifelse(df$ArrDelay > 14,"Delayed", "OnTime")
ggplot(df, aes(x=DayOfWeek, fill=factor(ArrStatus))) + geom_histogram(position="dodge") +
scale_fill_manual(values=c("#9F2042","#AEA200"))
# We shall add the flower type to the labels:
labels(dend) <- paste(as.character(iris[,5])[order.dendrogram(dend)],
"(",labels(dend),")",
sep = "")
# We hang the dendrogram a bit:
dend <- hang.dendrogram(dend,hang_height=0.1)
# reduce the size of the labels:
# dend <- assign_values_to_leaves_nodePar(dend, 0.5, "lab.cex")
dend <- set(dend, "labels_cex", 0.5)
# Define server logic required to cluster mtcars and plot dendrogram
shinyServer(function(input, output) {
data(mtcars)
stand <- function(x){ (x-mean(x))/sd(x) }              # function to standardise
toinclude <- c( "mpg", "disp", "hp", "wt", "drat", "qsec" ) # selected variables
standcars <- sapply(subset(mtcars, select=toinclude), "stand")       # apply fun
rownames(standcars) <- rownames(mtcars)                              # car names
output$distPlot <- renderPlot({
# checkboxes and cluster numbers mean plot redrawn so these are reactive
tocluster <- c(input$mpg, input$disp, input$hp, input$wt, input$drat, input$qsec)
if (sum(tocluster)==0){
plot(c(0,1,3), c(1,0,2), type="l", xaxt='n', yaxt='n',       #tick shape
main="Please choose one or more variable checkboxes",   #reminder
xlab="It doesn't work if you don't",                    #please
ylab="You know you want to")                            #joke
}else{
dmat <- dist(standcars[, tocluster], method = "euclidean")                   # distances
fit <- hclust(dmat, method="ward.D")                           # Hierarchical clustering
plot(fit, main=paste("Cluster Dendrogram. Mean height (i.e. distance):", round(mean(dmat),1)),
xlab="You can choose how many clusters and which variables")    # Display dendogram
rect.hclust(fit, k=input$clusters, border="red")              # red boxes round clusters
}
})
})
# Define server logic required to cluster mtcars and plot dendrogram
server = function(input, output, session) {
data(mtcars)
stand <- function(x){ (x-mean(x))/sd(x) }              # function to standardise
toinclude <- c( "mpg", "disp", "hp", "wt", "drat", "qsec" ) # selected variables
standcars <- sapply(subset(mtcars, select=toinclude), "stand")       # apply fun
rownames(standcars) <- rownames(mtcars)                              # car names
output$distPlot <- renderPlot({
# checkboxes and cluster numbers mean plot redrawn so these are reactive
tocluster <- c(input$mpg, input$disp, input$hp, input$wt, input$drat, input$qsec)
if (sum(tocluster)==0){
plot(c(0,1,3), c(1,0,2), type="l", xaxt='n', yaxt='n',       #tick shape
main="Please choose one or more variable checkboxes",   #reminder
xlab="It doesn't work if you don't",                    #please
ylab="You know you want to")                            #joke
}else{
dmat <- dist(standcars[, tocluster], method = "euclidean")                   # distances
fit <- hclust(dmat, method="ward.D")                           # Hierarchical clustering
plot(fit, main=paste("Cluster Dendrogram. Mean height (i.e. distance):", round(mean(dmat),1)),
xlab="You can choose how many clusters and which variables")    # Display dendogram
rect.hclust(fit, k=input$clusters, border="red")              # red boxes round clusters
}
})
}
if (sum(tocluster)==0){
plot(c(0,1,3), c(1,0,2), type="l", xaxt='n', yaxt='n',       #tick shape
main="Please choose one or more variable checkboxes",   #reminder
xlab="It doesn't work if you don't",                    #please
ylab="You know you want to")                            #joke
}else{
dmat <- dist(standcars[, tocluster], method = "euclidean")                   # distances
fit <- hclust(dmat, method="ward.D")                           # Hierarchical clustering
plot(fit, main=paste("Cluster Dendrogram. Mean height (i.e. distance):", round(mean(dmat),1)),
xlab="You can choose how many clusters and which variables")    # Display dendogram
rect.hclust(fit, k=input$clusters, border="red")              # red boxes round clusters
}
tocluster
heatmaply(mtcars, k_col = 2, k_row = 3) %>% layout(margin = list(l = 130, b = 40))
heatmaply(mtcars_2, k_row = 4, k_col = 2)
install.packages("heatmaply")
# I got the static image using ggheatmap instead of heatmaply
# I got the static image using ggheatmap instead of heatmaply
# I got the static image using ggheatmap instead of heatmaply
fluidPage(style="padding-top: 80px;",
h1("Absolutely-positioned panels"),
absolutePanel(
bottom = 20, right = 20, width = 300,
draggable = TRUE,
wellPanel(
HTML(markdownToHTML(fragment.only=TRUE, text=c(
"This is an absolutePanel that uses `bottom` and `right` attributes.
It also has `draggable = TRUE`, so you can drag it to move it around the page.
The slight transparency is due to `style = 'opacity: 0.92'`.
You can put anything in absolutePanel, including inputs and outputs:"
))),
sliderInput("n", "", min=3, max=20, value=5),
plotOutput("plot2", height="200px")
),
style = "opacity: 0.92"
),
absolutePanel(
top = 0, left = 0, right = 0,
fixed = TRUE,
div(
style="padding: 8px; border-bottom: 1px solid #CCC; background: #FFFFEE;",
HTML(markdownToHTML(fragment.only=TRUE, text=c(
"This absolutePanel is docked to the top of the screen
using `top`, `left`, and `right` attributes.
Because `fixed=TRUE`, it won't scroll with the page."
)))
)
),
plotOutput("plot", height = "800px")
)
devtools::install_github("jcheng5/googleCharts")
install.packages("devtools")
devtools::install_github("jcheng5/googleCharts")
install.packages("remotes")
install.packages("remotes")
remotes::install_github("jcheng5/googleCharts")
## Run instructions
From the root folder:
- mvn clean package -Pbuild-jar
- flink run -p 3 -c master.VehicleTelematics target/**$JAR_FILE** **$PATH_TO_INPUT_FILE** **$PATH_TO_OUTPUT_FOLDER**
## Run instructions
From the root folder:
- mvn clean package -Pbuild-jar
- flink run -p 3 -c master.VehicleTelematics target/**$JAR_FILE** **$PATH_TO_INPUT_FILE** **$PATH_TO_OUTPUT_FOLDER**
## Run instructions
From the root folder:
- mvn clean package -Pbuild-jar
- flink run -p 3 -c master.VehicleTelematics target/**$JAR_FILE** **$PATH_TO_INPUT_FILE** **$PATH_TO_OUTPUT_FOLDER**
## Run instructions
From the root folder:
- mvn clean package -Pbuild-jar
- **flink run -p 3 -c master.VehicleTelematics target/**$JAR_FILE** **$PATH_TO_INPUT_FILE** **$PATH_TO_OUTPUT_FOLDER****
## Run instructions
From the root folder:
- mvn clean package -Pbuild-jar
- **flink run -p 3 -c master.VehicleTelematics target/**$JAR_FILE** **$PATH_TO_INPUT_FILE** **$PATH_TO_OUTPUT_FOLDER**
## Run instructions
From the root folder:
1. mvn clean package -Pbuild-jar
2. flink run -p 3 -c master.VehicleTelematics target/**$JAR_FILE** **$PATH_TO_INPUT_FILE** **$PATH_TO_OUTPUT_FOLDER**
## Specifications
- Each vehicle reports a position event every 30 seconds with the following format: *Time, VID, Spd, XWay, Lane, Dir, Seg, Pos*
Where:
- *Time* is a timestamp (integer) in seconds which identifies the time at which the position event was emitted
- *VID* is an integer that identifies the vehicle
- *Spd* (0 - 100) is an integer that represents the speed mph (miles per hour) of the vehicle
- *XWay* (0 . . .L−1) identifies the highway from which the position report is emitted
- *Lane* (0 . . . 4) identifies the lane of the highway from which the position report is emitted (0 if it is an entrance ramp (ENTRY), 1 − 3 if it is a travel lane (TRAVEL) and 4 if it is an exit ramp (EXIT))
- *Dir* (0 . . . 1) indicates the direction (0 for Eastbound and 1 for Westbound) the vehicle is traveling
- *Seg* (0 . . . 99) identifies the segment from which the position report is emitted
- *Pos* (0 . . . 527999) identifies the horizontal position of the vehicle as the number of meters from the
westernmost point on the highway (i.e., Pos = x)
## Technical Requirements
1. Java 11
2. Maven
3. Flink 1.14.0
## Run instructions
From the root folder:
**mvn clean package -Pbuild-jar**
2. flink run -p 3 -c master.VehicleTelematics target/**$JAR_FILE** **$PATH_TO_INPUT_FILE** **$PATH_TO_OUTPUT_FOLDER**
## Run instructions
From the root folder:
**mvn clean package -Pbuild-jar**
runExample("01_hello")
setwd("~/Documents/BigData/UnplannedHospitalVisits/Idiom2")
shiny::runApp()
runApp()
shiny::runApp()
hospital_data <- read.csv("data/Unplanned_Hospital_Visits-Hospital.csv")
id1_df<- subset(hospital_data)
runApp()
runApp()
runApp()
runApp('C:/Personal/Master EIT/Madrid_UPM/Data Processes/DataViz/idiom4.R')
runApp()
